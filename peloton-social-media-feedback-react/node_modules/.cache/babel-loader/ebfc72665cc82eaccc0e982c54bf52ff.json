{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/taylor.ellsworth/RN_Course_Final_Project/taylor-real-final-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _regeneratorRuntime from \"/Users/taylor.ellsworth/RN_Course_Final_Project/taylor-real-final-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"/Users/taylor.ellsworth/RN_Course_Final_Project/taylor-real-final-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/Users/taylor.ellsworth/RN_Course_Final_Project/taylor-real-final-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/Users/taylor.ellsworth/RN_Course_Final_Project/taylor-real-final-project/src/components/RetreiveAPI.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  list-style-type: none;\\n  margin-left: auto;\\n  margin-right: auto;  \\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport Twitter from \"./Twitter\";\nimport Reddit from \"./Reddit\";\nimport Facebook from \"./Facebook\";\nimport styled from \"styled-components\";\nvar initialState = {\n  searchParam: {\n    twitter: 'Peloton Bike',\n    reddit: 'Bike',\n    facebook: ''\n  },\n  retreivedPosts: []\n};\n\nfunction reducer(prevState, _ref) {\n  var _newPosts, _newPosts2;\n\n  var type = _ref.type,\n      payload = _ref.payload;\n  console.log('tweet reducer payload', payload); //may need to add let newReceivedTweets = []\n  //see from hw due 1/14 - refactor to redux\n\n  var newPosts = [];\n\n  switch (type) {\n    case \"RECEIVED_TWEETS\":\n      newPosts = _toConsumableArray(prevState);\n\n      (_newPosts = newPosts).splice.apply(_newPosts, [0, newPosts.length].concat(_toConsumableArray(payload)));\n\n      return newPosts;\n\n    case \"RECEIVED_REDDIT_POSTS\":\n      newPosts = _toConsumableArray(prevState);\n\n      (_newPosts2 = newPosts).splice.apply(_newPosts2, [0, newPosts.length].concat(_toConsumableArray(payload)));\n\n      return newPosts;\n\n    default:\n      return prevState;\n  }\n}\n\nfunction RetreiveAPI(props) {\n  console.log(\"RetreiveAPI props\", props);\n\n  var _React$useReducer = React.useReducer(reducer, initialState.retreivedPosts),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      receivedPosts = _React$useReducer2[0],\n      receivedPostsDispatch = _React$useReducer2[1];\n\n  var getTweet = function getTweet() {\n    var response, incomingData;\n    return _regeneratorRuntime.async(function getTweet$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch('/twitter'));\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 5:\n            incomingData = _context.sent;\n            receivedPostsDispatch({\n              type: \"RECEIVED_TWEETS\",\n              payload: incomingData.statuses\n            });\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  };\n\n  var getRedditPost = function getRedditPost() {\n    var newArray, response, incomingData;\n    return _regeneratorRuntime.async(function getRedditPost$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            newArray = [];\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(fetch('/reddit'));\n\n          case 3:\n            response = _context2.sent;\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            incomingData = _context2.sent;\n            console.log('incoming data right here!!!!', incomingData);\n            incomingData.map(function (post) {\n              newArray.push({\n                title: post.title,\n                text: post.selftext,\n                author: post.author,\n                createdTime: post.created_utc,\n                url: post.permalink\n              });\n            });\n            receivedPostsDispatch({\n              type: \"RECEIVED_REDDIT_POSTS\",\n              payload: newArray\n            });\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    });\n  };\n\n  var sendSearchParamTwitter = function sendSearchParamTwitter() {\n    fetch('/twitterApiSearch', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        seachParam: initialState.searchParam.twitter\n      })\n    });\n    getTweet();\n  };\n\n  var sendSearchParamReddit = function sendSearchParamReddit() {\n    fetch('/redditApiSearch', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        searchParam: initialState.searchParam.reddit\n      })\n    });\n    getRedditPost();\n  };\n\n  React.useEffect(function () {\n    if (props.match.params.socialMedia === 'twitter') sendSearchParamTwitter();\n    if (props.match.params.socialMedia === 'reddit') sendSearchParamReddit();\n  }, []);\n\n  var memberPosts = function memberPosts() {\n    switch (props.match.params.socialMedia) {\n      case 'twitter':\n        return receivedPosts.map(function (receivedPost) {\n          return React.createElement(Twitter, {\n            tweetId: receivedPost.id_str,\n            key: receivedPost.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 90\n            },\n            __self: this\n          });\n        });\n\n      case 'reddit':\n        return receivedPosts.map(function (receivedPost) {\n          return React.createElement(Reddit, {\n            post: receivedPost,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 94\n            },\n            __self: this\n          });\n        });\n\n      case 'facebook':\n        return React.createElement(Facebook, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        });\n    }\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    align: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, \"Showing \", props.match.params.socialMedia, \" posts for \", props.match.params.product, \"!!!\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, React.createElement(PostContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, memberPosts())));\n}\n\nvar PostContainer = styled.div(_templateObject());\nexport default RetreiveAPI;","map":{"version":3,"sources":["/Users/taylor.ellsworth/RN_Course_Final_Project/taylor-real-final-project/src/components/RetreiveAPI.js"],"names":["React","Twitter","Reddit","Facebook","styled","initialState","searchParam","twitter","reddit","facebook","retreivedPosts","reducer","prevState","type","payload","console","log","newPosts","splice","length","RetreiveAPI","props","useReducer","receivedPosts","receivedPostsDispatch","getTweet","fetch","response","json","incomingData","statuses","getRedditPost","newArray","map","post","push","title","text","selftext","author","createdTime","created_utc","url","permalink","sendSearchParamTwitter","method","headers","body","JSON","stringify","seachParam","sendSearchParamReddit","useEffect","match","params","socialMedia","memberPosts","receivedPost","id_str","id","product","PostContainer","div"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Twitter from \"./Twitter\";\nimport Reddit from \"./Reddit\";\nimport Facebook from \"./Facebook\";\nimport styled from \"styled-components\";\n\nconst initialState = {\n  searchParam: {twitter: 'Peloton Bike', reddit: 'Bike', facebook: ''},\n  retreivedPosts: []\n};\n\nfunction reducer(prevState, {type, payload}) {\n  console.log('tweet reducer payload', payload);\n  //may need to add let newReceivedTweets = []\n  //see from hw due 1/14 - refactor to redux\n  let newPosts = [];\n  switch(type) {\n    case \"RECEIVED_TWEETS\":\n      newPosts = [...prevState];\n      newPosts.splice(0, newPosts.length, ...payload);\n      return newPosts;\n    case \"RECEIVED_REDDIT_POSTS\":\n      newPosts = [...prevState];\n      newPosts.splice(0, newPosts.length, ...payload);\n      return newPosts;\n    default:\n      return prevState;\n  }\n}\n\nfunction RetreiveAPI(props) {\n  console.log(\"RetreiveAPI props\", props);\n  \n  const [receivedPosts, receivedPostsDispatch] = React.useReducer(reducer, initialState.retreivedPosts);\n\n  const getTweet = async() => {\n    const response = await fetch('/twitter');\n    const incomingData = await response.json();\n    receivedPostsDispatch({ type: \"RECEIVED_TWEETS\", payload: incomingData.statuses });\n  };\n\n  const getRedditPost = async() => {\n    let newArray = [];\n    const response = await fetch('/reddit');\n    const incomingData = await response.json();\n    console.log('incoming data right here!!!!', incomingData);\n    incomingData.map(post => {\n      newArray.push({ \n        title: post.title,\n        text: post.selftext,\n        author: post.author,\n        createdTime: post.created_utc,\n        url: post.permalink\n      })\n    })\n    receivedPostsDispatch({ type: \"RECEIVED_REDDIT_POSTS\", payload: newArray })\n  }\n\n  const sendSearchParamTwitter = () => {\n    fetch('/twitterApiSearch', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({seachParam: initialState.searchParam.twitter})\n    });\n    getTweet()\n  }\n\n  const sendSearchParamReddit = () => {\n    fetch('/redditApiSearch', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({searchParam: initialState.searchParam.reddit})\n    });\n    getRedditPost();\n  }\n\n  React.useEffect(() => {\n    if(props.match.params.socialMedia === 'twitter') sendSearchParamTwitter();\n    if(props.match.params.socialMedia === 'reddit') sendSearchParamReddit();\n  }, []);\n\n  const memberPosts = () => {\n    switch(props.match.params.socialMedia){\n      case 'twitter':\n        return (receivedPosts.map(receivedPost => (\n          <Twitter tweetId={receivedPost.id_str} key={receivedPost.id}/>\n        )));\n      case 'reddit':\n        return (receivedPosts.map(receivedPost => (\n          <Reddit post={receivedPost} />\n        )));\n      case 'facebook':\n        return <Facebook/>;\n    }\n  }\n\n  return (\n    <div>\n      <div align=\"center\">\n      Showing {props.match.params.socialMedia} posts for {props.match.params.product}!!!\n      </div>\n      <div>\n        <PostContainer>\n          {memberPosts()}\n        </PostContainer>\n      </div>\n    </div>\n  );\n}\n\nconst PostContainer = styled.div`\n  list-style-type: none;\n  margin-left: auto;\n  margin-right: auto;  \n`\n\n\n\nexport default RetreiveAPI;\n"]},"metadata":{},"sourceType":"module"}