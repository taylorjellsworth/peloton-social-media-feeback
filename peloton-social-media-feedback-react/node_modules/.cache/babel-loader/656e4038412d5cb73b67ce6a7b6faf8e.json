{"ast":null,"code":"import _toConsumableArray from \"/Users/taylor.ellsworth/RN_Course_Final_Project/taylor-real-final-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/taylor.ellsworth/RN_Course_Final_Project/taylor-real-final-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"/Users/taylor.ellsworth/RN_Course_Final_Project/taylor-real-final-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/taylor.ellsworth/RN_Course_Final_Project/taylor-real-final-project/src/components/RetreiveAPI.js\";\nimport React from \"react\";\nimport { TwitterTweetEmbed } from \"react-twitter-embed\";\n\nfunction RetreiveAPI(props) {\n  console.log(\"RetreiveAPI props\", props);\n  var isTwitter = props.match.params.socialMedia === 'twitter';\n  var isReddit = props.match.params.socialMedia === 'reddit';\n  var isFacebook = props.match.params.socialMedia === 'facebook'; //To Do: Hook up search keyword to initial state\n\n  var initialState = {\n    searchParam: {\n      twitter: 'Peloton',\n      reddit: 'Bike'\n    },\n    retreivedPosts: []\n  };\n\n  var _React$useReducer = React.useReducer(reducer, initialState.retreivedPosts),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      receivedPosts = _React$useReducer2[0],\n      receivedPostsDispatch = _React$useReducer2[1];\n\n  var getTweet = function getTweet() {\n    var response, incomingData;\n    return _regeneratorRuntime.async(function getTweet$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch('/twitter'));\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 5:\n            incomingData = _context.sent;\n            receivedPostsDispatch({\n              type: \"RECEIVED_TWEETS\",\n              payload: incomingData.statuses\n            });\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  };\n\n  var getRedditPost = function getRedditPost() {\n    var newArray, response, incomingData;\n    return _regeneratorRuntime.async(function getRedditPost$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            newArray = [];\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(fetch('/reddit'));\n\n          case 3:\n            response = _context2.sent;\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            incomingData = _context2.sent;\n            incomingData.map(function (post) {\n              newArray.push({\n                title: post.title,\n                text: post.selftext,\n                author: post.author,\n                createdTime: post.created_utc\n              });\n            });\n            receivedPostsDispatch({\n              type: \"RECEIVED_REDDIT_POSTS\",\n              payload: newArray\n            });\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    });\n  };\n\n  var l = function l() {\n    fetch('/twitterSearchParam', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        seachParam: initialState.searchParam.twitter\n      })\n    });\n    getTweet();\n  };\n\n  var sendSearchParamReddit = function sendSearchParamReddit(e) {\n    fetch('/redditSearchParam', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        searchParam: initialState.searchParam.reddit\n      })\n    });\n    getRedditPost();\n  };\n\n  function reducer(prevState, _ref) {\n    var type = _ref.type,\n        payload = _ref.payload;\n    console.log('tweet reducer payload', payload); //may need to add let newReceivedTweets = []\n    //see from hw due 1/14 - refactor to redux\n\n    switch (type) {\n      case \"RECEIVED_TWEETS\":\n        var newReceivedTweets = _toConsumableArray(prevState);\n\n        newReceivedTweets.splice.apply(newReceivedTweets, [0, newReceivedTweets.length].concat(_toConsumableArray(payload)));\n        return newReceivedTweets;\n\n      case \"RECEIVED_REDDIT_POSTS\":\n        var newReceivedRedditPosts = _toConsumableArray(prevState);\n\n        newReceivedRedditPosts.splice.apply(newReceivedRedditPosts, [0, newReceivedRedditPosts.length].concat(_toConsumableArray(payload)));\n        return newReceivedRedditPosts;\n\n      default:\n        return prevState;\n    }\n  }\n\n  React.useEffect(function () {\n    if (props.match.params.socialMedia === 'twitter') sendSearchParamTwitter();\n    if (props.match.params.socialMedia === 'reddit') sendSearchParamReddit();\n  }, []);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, \"Showing \", props.match.params.socialMedia, \" Member posts for \", props.match.params.product, \"!!!\", React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, isTwitter && receivedPosts.map(function (receivedPost) {\n    return React.createElement(TwitterTweetEmbed, {\n      tweetId: receivedPost.id_str,\n      key: receivedPost.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    });\n  }), isReddit && receivedPosts.map(function (receivedPost) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, receivedPost.title));\n  }), isFacebook && React.createElement(\"em\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, \"Under Construction\")));\n}\n\nexport default RetreiveAPI;","map":{"version":3,"sources":["/Users/taylor.ellsworth/RN_Course_Final_Project/taylor-real-final-project/src/components/RetreiveAPI.js"],"names":["React","TwitterTweetEmbed","RetreiveAPI","props","console","log","isTwitter","match","params","socialMedia","isReddit","isFacebook","initialState","searchParam","twitter","reddit","retreivedPosts","useReducer","reducer","receivedPosts","receivedPostsDispatch","getTweet","fetch","response","json","incomingData","type","payload","statuses","getRedditPost","newArray","map","post","push","title","text","selftext","author","createdTime","created_utc","l","method","headers","body","JSON","stringify","seachParam","sendSearchParamReddit","e","prevState","newReceivedTweets","splice","length","newReceivedRedditPosts","useEffect","sendSearchParamTwitter","product","receivedPost","id_str","id"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { TwitterTweetEmbed } from \"react-twitter-embed\";\n\nfunction RetreiveAPI(props) {\n  console.log(\"RetreiveAPI props\", props);\n\n  const isTwitter = props.match.params.socialMedia === 'twitter'\n  const isReddit = props.match.params.socialMedia === 'reddit'\n  const isFacebook = props.match.params.socialMedia === 'facebook'\n  \n  //To Do: Hook up search keyword to initial state\n  const initialState = {\n    searchParam: {twitter: 'Peloton', reddit: 'Bike'},\n    retreivedPosts: []\n  };\n\n  const [receivedPosts, receivedPostsDispatch] = React.useReducer(reducer, initialState.retreivedPosts);\n\n  const getTweet = async() => {\n    const response = await fetch('/twitter');\n    const incomingData = await response.json();\n    receivedPostsDispatch({ type: \"RECEIVED_TWEETS\", payload: incomingData.statuses });\n  };\n\n  const getRedditPost = async() => {\n    let newArray = [];\n    const response = await fetch('/reddit');\n    const incomingData = await response.json();\n    incomingData.map(post => {\n      newArray.push({ \n        title: post.title,\n        text: post.selftext,\n        author: post.author,\n        createdTime: post.created_utc\n      })\n    })\n\n    receivedPostsDispatch({ type: \"RECEIVED_REDDIT_POSTS\", payload: newArray })\n  }\n\n  const l = () => {\n    fetch('/twitterSearchParam', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({seachParam: initialState.searchParam.twitter})\n    });\n    getTweet()\n  }\n\n  const sendSearchParamReddit = (e) => {\n    fetch('/redditSearchParam', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({searchParam: initialState.searchParam.reddit})\n    });\n    getRedditPost();\n  }\n\n  function reducer(prevState, {type, payload}) {\n    console.log('tweet reducer payload', payload);\n    //may need to add let newReceivedTweets = []\n    //see from hw due 1/14 - refactor to redux\n    switch(type) {\n      case \"RECEIVED_TWEETS\":\n        const newReceivedTweets = [...prevState];\n        newReceivedTweets.splice(0, newReceivedTweets.length, ...payload);\n        return newReceivedTweets;\n      case \"RECEIVED_REDDIT_POSTS\":\n        const newReceivedRedditPosts = [...prevState];\n        newReceivedRedditPosts.splice(0, newReceivedRedditPosts.length, ...payload);\n        return newReceivedRedditPosts;\n      default:\n        return prevState;\n    }\n  }\n\n  React.useEffect(() => {\n    if(props.match.params.socialMedia === 'twitter') sendSearchParamTwitter();\n    if(props.match.params.socialMedia === 'reddit') sendSearchParamReddit();\n  }, []);\n\n  return (\n    <div>\n      Showing {props.match.params.socialMedia} Member posts for {props.match.params.product}!!!\n      {/* <p>\n      <button onClick={sendSearchParamReddit}>Button to Get Tweets! </button>\n      </p> */}\n      <p>\n      {isTwitter && (\n        receivedPosts.map(receivedPost => (\n          <TwitterTweetEmbed tweetId={receivedPost.id_str} key={receivedPost.id}/>\n        ))\n      )}\n      {isReddit && (\n        receivedPosts.map(receivedPost => (\n          <div>\n            <p>{receivedPost.title}</p>\n            {/* To Do: Display All Data */}\n          </div>\n        ))\n      )}\n      {isFacebook && (\n        <em>Under Construction</em>\n      )}\n      </p>\n    </div>\n  );\n}\n\nexport default RetreiveAPI;\n"]},"metadata":{},"sourceType":"module"}