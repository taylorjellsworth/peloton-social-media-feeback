{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/taylor.ellsworth/RN_Course_Final_Project/taylor-real-final-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _regeneratorRuntime from \"/Users/taylor.ellsworth/RN_Course_Final_Project/taylor-real-final-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"/Users/taylor.ellsworth/RN_Course_Final_Project/taylor-real-final-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/Users/taylor.ellsworth/RN_Course_Final_Project/taylor-real-final-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/Users/taylor.ellsworth/RN_Course_Final_Project/taylor-real-final-project/src/components/RetreiveAPI.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  list-style-type: none;\\n  margin-left: 70px;\\n  margin-right: 70px;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Twitter from \"./Twitter\";\nimport Reddit from \"./Reddit\";\nimport Facebook from \"./Facebook\";\nimport styled from \"styled-components\";\nimport EmptySearchResult from \"./EmptySearchResult\";\nvar initialState = {\n  searchParam: {\n    twitter: \"Peloton Bike\",\n    reddit: \"Bike\",\n    facebook: \"\"\n  },\n  retreivedPosts: [\"\"]\n};\n\nfunction reducer(prevState, _ref) {\n  var _newPosts, _newPosts2;\n\n  var type = _ref.type,\n      payload = _ref.payload;\n  console.log(\"tweet reducer payload\", payload);\n  var newPosts = [];\n\n  switch (type) {\n    case \"RECEIVED_TWEETS\":\n      newPosts = _toConsumableArray(prevState);\n\n      (_newPosts = newPosts).splice.apply(_newPosts, [0, newPosts.length].concat(_toConsumableArray(payload)));\n\n      return newPosts;\n\n    case \"RECEIVED_REDDIT_POSTS\":\n      newPosts = _toConsumableArray(prevState);\n\n      (_newPosts2 = newPosts).splice.apply(_newPosts2, [0, newPosts.length].concat(_toConsumableArray(payload)));\n\n      return newPosts;\n\n    default:\n      return prevState;\n  }\n}\n\nfunction RetreiveAPI(props) {\n  console.log(\"RetreiveAPI props\", props);\n  console.log(\"What is my state in RetreiveAPI???\", appState);\n\n  var _React$useReducer = React.useReducer(reducer, initialState.retreivedPosts),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      receivedPosts = _React$useReducer2[0],\n      receivedPostsDispatch = _React$useReducer2[1];\n\n  var searchTerms = useSelector(function (appState) {\n    return appState.searchTerm;\n  });\n  var appState = useSelector(function (appState) {\n    return appState.selectedProduct;\n  });\n\n  var getTweet = function getTweet() {\n    var response, incomingData;\n    return _regeneratorRuntime.async(function getTweet$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch(\"/twitter\"));\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 5:\n            incomingData = _context.sent;\n\n            if (incomingData == null) {\n              receivedPostsDispatch({\n                type: \"RECEIVED_TWEETS\",\n                payload: incomingData.statuses\n              });\n            }\n\n            receivedPostsDispatch({\n              type: \"RECEIVED_TWEETS\",\n              payload: incomingData.statuses\n            });\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  };\n\n  var getRedditPost = function getRedditPost() {\n    var newArray, response, incomingData;\n    return _regeneratorRuntime.async(function getRedditPost$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            newArray = [];\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(fetch(\"/reddit\"));\n\n          case 3:\n            response = _context2.sent;\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            incomingData = _context2.sent;\n            incomingData.map(function (post) {\n              newArray.push({\n                title: post.title,\n                text: post.selftext,\n                author: post.author,\n                createdTime: post.created_utc,\n                url: post.permalink\n              });\n            });\n            receivedPostsDispatch({\n              type: \"RECEIVED_REDDIT_POSTS\",\n              payload: newArray\n            });\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    });\n  };\n\n  var sendSearchParamTwitter = function sendSearchParamTwitter() {\n    return _regeneratorRuntime.async(function sendSearchParamTwitter$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            fetch(\"/twitterApiSearch\", {\n              method: \"post\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify({\n                seachParam: initialState.searchParam.twitter\n              })\n            });\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(getTweet());\n\n          case 3:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    });\n  };\n\n  var sendSearchParamReddit = function sendSearchParamReddit() {\n    return _regeneratorRuntime.async(function sendSearchParamReddit$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            fetch(\"/redditApiSearch\", {\n              method: \"post\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify({\n                searchParam: initialState.searchParam.reddit\n              })\n            });\n            _context4.next = 3;\n            return _regeneratorRuntime.awrap(getRedditPost());\n\n          case 3:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    });\n  };\n\n  React.useEffect(function () {\n    if (props.match.params.socialMedia === \"twitter\") sendSearchParamTwitter();\n    if (props.match.params.socialMedia === \"reddit\") sendSearchParamReddit();\n  }, [searchTerms]);\n\n  var memberPosts = function memberPosts() {\n    console.log(\"neeeeeeed results!!!!\", receivedPosts);\n\n    if (receivedPosts.length > 0) {\n      switch (props.match.params.socialMedia) {\n        case \"twitter\":\n          return receivedPosts.map(function (receivedPost) {\n            return React.createElement(Twitter, {\n              tweetId: receivedPost.id_str,\n              key: receivedPost.id,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 101\n              },\n              __self: this\n            });\n          });\n\n        case \"reddit\":\n          return receivedPosts.map(function (receivedPost) {\n            return React.createElement(Reddit, {\n              post: receivedPost,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 103\n              },\n              __self: this\n            });\n          });\n\n        case \"facebook\":\n          return React.createElement(Facebook, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 105\n            },\n            __self: this\n          });\n      }\n    } else return React.createElement(EmptySearchResult, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    });\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    align: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, \"Showing \", props.match.params.socialMedia, \" posts for \", props.match.params.product, \"!!!\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, React.createElement(PostContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, memberPosts())));\n}\n\nvar PostContainer = styled.div(_templateObject());\nexport default RetreiveAPI;","map":{"version":3,"sources":["/Users/taylor.ellsworth/RN_Course_Final_Project/taylor-real-final-project/src/components/RetreiveAPI.js"],"names":["React","useSelector","Twitter","Reddit","Facebook","styled","EmptySearchResult","initialState","searchParam","twitter","reddit","facebook","retreivedPosts","reducer","prevState","type","payload","console","log","newPosts","splice","length","RetreiveAPI","props","appState","useReducer","receivedPosts","receivedPostsDispatch","searchTerms","searchTerm","selectedProduct","getTweet","fetch","response","json","incomingData","statuses","getRedditPost","newArray","map","post","push","title","text","selftext","author","createdTime","created_utc","url","permalink","sendSearchParamTwitter","method","headers","body","JSON","stringify","seachParam","sendSearchParamReddit","useEffect","match","params","socialMedia","memberPosts","receivedPost","id_str","id","product","PostContainer","div"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Twitter from \"./Twitter\";\nimport Reddit from \"./Reddit\";\nimport Facebook from \"./Facebook\";\nimport styled from \"styled-components\";\nimport EmptySearchResult from \"./EmptySearchResult\";\n\nconst initialState = {\n  searchParam: { twitter: \"Peloton Bike\", reddit: \"Bike\", facebook: \"\" },\n  retreivedPosts: [\"\"]\n};\n\nfunction reducer(prevState, { type, payload }) {\n  console.log(\"tweet reducer payload\", payload);\n  let newPosts = [];\n  switch (type) {\n    case \"RECEIVED_TWEETS\":\n      newPosts = [...prevState];\n      newPosts.splice(0, newPosts.length, ...payload);\n      return newPosts;\n    case \"RECEIVED_REDDIT_POSTS\":\n      newPosts = [...prevState];\n      newPosts.splice(0, newPosts.length, ...payload);\n      return newPosts;\n    default:\n      return prevState;\n  }\n}\n\nfunction RetreiveAPI(props) {\n  console.log(\"RetreiveAPI props\", props);\n  console.log(\"What is my state in RetreiveAPI???\", appState);\n  const [receivedPosts, receivedPostsDispatch] = React.useReducer(reducer, initialState.retreivedPosts);\n  const searchTerms = useSelector(appState => appState.searchTerm);\n  const appState = useSelector(appState => appState.selectedProduct);\n\n  const getTweet = async () => {\n    const response = await fetch(\"/twitter\");\n    const incomingData = await response.json();\n    if (incomingData == null) {\n      receivedPostsDispatch({\n        type: \"RECEIVED_TWEETS\",\n        payload: incomingData.statuses\n      });\n    }\n    receivedPostsDispatch({\n      type: \"RECEIVED_TWEETS\",\n      payload: incomingData.statuses\n    });\n  };\n\n  const getRedditPost = async () => {\n    let newArray = [];\n    const response = await fetch(\"/reddit\");\n    const incomingData = await response.json();\n    incomingData.map(post => {\n      newArray.push({\n        title: post.title,\n        text: post.selftext,\n        author: post.author,\n        createdTime: post.created_utc,\n        url: post.permalink\n      });\n    });\n    receivedPostsDispatch({ type: \"RECEIVED_REDDIT_POSTS\", payload: newArray });\n  };\n\n  const sendSearchParamTwitter = async () => {\n    fetch(\"/twitterApiSearch\", {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({ seachParam: initialState.searchParam.twitter })\n    });\n    await getTweet();\n  };\n\n  const sendSearchParamReddit = async () => {\n    fetch(\"/redditApiSearch\", {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({ searchParam: initialState.searchParam.reddit })\n    });\n    await getRedditPost();\n  };\n\n  React.useEffect(() => {\n    if (props.match.params.socialMedia === \"twitter\") sendSearchParamTwitter();\n    if (props.match.params.socialMedia === \"reddit\") sendSearchParamReddit();\n  }, [searchTerms]);\n\n  const memberPosts = () => {\n    console.log(\"neeeeeeed results!!!!\", receivedPosts);\n    if (receivedPosts.length > 0) {\n      switch (props.match.params.socialMedia) {\n        case \"twitter\":\n          return receivedPosts.map(receivedPost => <Twitter tweetId={receivedPost.id_str} key={receivedPost.id} />);\n        case \"reddit\":\n          return receivedPosts.map(receivedPost => <Reddit post={receivedPost} />);\n        case \"facebook\":\n          return <Facebook />;\n      }\n    } else return <EmptySearchResult />;\n  };\n\n  return (\n    <div>\n      <div align=\"center\">\n        Showing {props.match.params.socialMedia} posts for {props.match.params.product}!!!\n      </div>\n      <div>\n        <PostContainer>{memberPosts()}</PostContainer>\n      </div>\n    </div>\n  );\n}\n\nconst PostContainer = styled.div`\n  list-style-type: none;\n  margin-left: 70px;\n  margin-right: 70px;\n`;\n\nexport default RetreiveAPI;\n"]},"metadata":{},"sourceType":"module"}