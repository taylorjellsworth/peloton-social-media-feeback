{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/taylor.ellsworth/peloton-social-media-feeback/peloton-social-media-feedback-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _regeneratorRuntime from \"/Users/taylor.ellsworth/peloton-social-media-feeback/peloton-social-media-feedback-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"/Users/taylor.ellsworth/peloton-social-media-feeback/peloton-social-media-feedback-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/Users/taylor.ellsworth/peloton-social-media-feeback/peloton-social-media-feedback-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/Users/taylor.ellsworth/peloton-social-media-feeback/peloton-social-media-feedback-react/src/components/Api/RetreivedPosts.js\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  text-align: center;\\n  margin-bottom: 30px;\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  list-style-type: none;\\n  margin-left: 70px;\\n  margin-right: 70px;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Twitter from \"../DisplayPosts/Twitter\";\nimport Reddit from \"../DisplayPosts/Reddit\";\nimport Facebook from \"../DisplayPosts/Facebook\";\nimport EmptySearchResult from \"../DisplayPosts/EmptySearchResult\";\nimport styled from \"styled-components\";\nimport getSearchQuery from \"./GetSearchQuery\";\nimport { sendSearchQueryTwitter, sendSearchQueryReddit } from \"./SendSearchQueryToApi\";\nimport { SocialIcon } from \"react-social-icons\";\n\nfunction reducer(prevState, _ref) {\n  var _newPosts, _newPosts2;\n\n  var type = _ref.type,\n      payload = _ref.payload;\n  var newPosts = [];\n\n  switch (type) {\n    case \"RECEIVED_TWEETS\":\n      newPosts = _toConsumableArray(prevState);\n\n      (_newPosts = newPosts).splice.apply(_newPosts, [0, newPosts.length].concat(_toConsumableArray(payload)));\n\n      return newPosts;\n\n    case \"RECEIVED_REDDIT_POSTS\":\n      newPosts = _toConsumableArray(prevState);\n\n      (_newPosts2 = newPosts).splice.apply(_newPosts2, [0, newPosts.length].concat(_toConsumableArray(payload)));\n\n      return newPosts;\n\n    default:\n      return prevState;\n  }\n}\n\nfunction RetreiveAPI(props) {\n  var _React$useReducer = React.useReducer(reducer, [\"\"]),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      receivedPosts = _React$useReducer2[0],\n      receivedPostsDispatch = _React$useReducer2[1];\n\n  var _useSelector = useSelector(function (appState) {\n    return appState;\n  }),\n      selectedProduct = _useSelector.selectedProduct,\n      selectedSocialMedia = _useSelector.selectedSocialMedia,\n      searchTerm = _useSelector.searchTerm;\n\n  var getTweets = function getTweets(searchParameter) {\n    var response, incomingData;\n    return _regeneratorRuntime.async(function getTweets$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            sendSearchQueryTwitter(searchParameter);\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fetch(\"/twitter\"));\n\n          case 3:\n            response = _context.sent;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            incomingData = _context.sent;\n            receivedPostsDispatch({\n              type: \"RECEIVED_TWEETS\",\n              payload: incomingData.statuses\n            });\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  };\n\n  var getRedditPost = function getRedditPost(searchParameter) {\n    var redditPosts, response, incomingData;\n    return _regeneratorRuntime.async(function getRedditPost$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            redditPosts = [];\n            sendSearchQueryReddit(searchParameter);\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(fetch(\"/reddit\"));\n\n          case 4:\n            response = _context2.sent;\n            _context2.next = 7;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 7:\n            incomingData = _context2.sent;\n            incomingData.map(function (post) {\n              return redditPosts.push({\n                title: post.title,\n                text: post.selftext,\n                author: post.author,\n                createdTime: post.created_utc,\n                url: post.permalink\n              });\n            });\n            receivedPostsDispatch({\n              type: \"RECEIVED_REDDIT_POSTS\",\n              payload: redditPosts\n            });\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    });\n  };\n\n  React.useEffect(function () {\n    var searchQuery = getSearchQuery(selectedSocialMedia, selectedProduct, searchTerm);\n    if (selectedSocialMedia === \"twitter\") getTweets(searchQuery);\n    if (selectedSocialMedia === \"reddit\") getRedditPost(searchQuery);\n  }, [selectedProduct]);\n\n  var memberPosts = function memberPosts() {\n    if (receivedPosts.length > 0) {\n      switch (selectedSocialMedia) {\n        case \"twitter\":\n          return receivedPosts.map(function (receivedPost) {\n            return React.createElement(Twitter, {\n              tweetId: receivedPost.id_str,\n              key: receivedPost.id,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 66\n              },\n              __self: this\n            });\n          });\n\n        case \"reddit\":\n          return receivedPosts.map(function (receivedPost) {\n            return React.createElement(Reddit, {\n              post: receivedPost,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 68\n              },\n              __self: this\n            });\n          });\n\n        case \"facebook\":\n          return React.createElement(Facebook, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 70\n            },\n            __self: this\n          });\n      }\n    } else return React.createElement(EmptySearchResult, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    });\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(ResultsHeader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"Showing \", React.createElement(SocialIcon, {\n    network: selectedSocialMedia,\n    style: {\n      height: 35,\n      width: 35\n    },\n    fgColor: \"white\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }), \" posts for\", \" \", props.match.params.product), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(PostContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, memberPosts())));\n}\n\nvar PostContainer = styled.div(_templateObject());\nvar ResultsHeader = styled.h4(_templateObject2());\nexport default RetreiveAPI;","map":{"version":3,"sources":["/Users/taylor.ellsworth/peloton-social-media-feeback/peloton-social-media-feedback-react/src/components/Api/RetreivedPosts.js"],"names":["React","useSelector","Twitter","Reddit","Facebook","EmptySearchResult","styled","getSearchQuery","sendSearchQueryTwitter","sendSearchQueryReddit","SocialIcon","reducer","prevState","type","payload","newPosts","splice","length","RetreiveAPI","props","useReducer","receivedPosts","receivedPostsDispatch","appState","selectedProduct","selectedSocialMedia","searchTerm","getTweets","searchParameter","fetch","response","json","incomingData","statuses","getRedditPost","redditPosts","map","post","push","title","text","selftext","author","createdTime","created_utc","url","permalink","useEffect","searchQuery","memberPosts","receivedPost","id_str","id","height","width","match","params","product","PostContainer","div","ResultsHeader","h4"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Twitter from \"../DisplayPosts/Twitter\";\nimport Reddit from \"../DisplayPosts/Reddit\";\nimport Facebook from \"../DisplayPosts/Facebook\";\nimport EmptySearchResult from \"../DisplayPosts/EmptySearchResult\";\nimport styled from \"styled-components\";\nimport getSearchQuery from \"./GetSearchQuery\";\nimport { sendSearchQueryTwitter, sendSearchQueryReddit } from \"./SendSearchQueryToApi\";\nimport { SocialIcon } from \"react-social-icons\";\n\nfunction reducer(prevState, { type, payload }) {\n  let newPosts = [];\n  switch (type) {\n    case \"RECEIVED_TWEETS\":\n      newPosts = [...prevState];\n      newPosts.splice(0, newPosts.length, ...payload);\n      return newPosts;\n    case \"RECEIVED_REDDIT_POSTS\":\n      newPosts = [...prevState];\n      newPosts.splice(0, newPosts.length, ...payload);\n      return newPosts;\n    default:\n      return prevState;\n  }\n}\n\nfunction RetreiveAPI(props) {\n  const [receivedPosts, receivedPostsDispatch] = React.useReducer(reducer, [\"\"]);\n  const { selectedProduct, selectedSocialMedia, searchTerm } = useSelector(appState => appState);\n\n  const getTweets = async searchParameter => {\n    sendSearchQueryTwitter(searchParameter);\n    const response = await fetch(\"/twitter\");\n    const incomingData = await response.json();\n    receivedPostsDispatch({ type: \"RECEIVED_TWEETS\", payload: incomingData.statuses });\n  };\n\n  const getRedditPost = async searchParameter => {\n    let redditPosts = [];\n    sendSearchQueryReddit(searchParameter);\n    const response = await fetch(\"/reddit\");\n    const incomingData = await response.json();\n    incomingData.map(post => {\n      return redditPosts.push({\n        title: post.title,\n        text: post.selftext,\n        author: post.author,\n        createdTime: post.created_utc,\n        url: post.permalink\n      });\n    });\n    receivedPostsDispatch({ type: \"RECEIVED_REDDIT_POSTS\", payload: redditPosts });\n  };\n\n  React.useEffect(() => {\n    let searchQuery = getSearchQuery(selectedSocialMedia, selectedProduct, searchTerm);\n    if (selectedSocialMedia === \"twitter\") getTweets(searchQuery);\n    if (selectedSocialMedia === \"reddit\") getRedditPost(searchQuery);\n  }, [selectedProduct]);\n\n  const memberPosts = () => {\n    if (receivedPosts.length > 0) {\n      switch (selectedSocialMedia) {\n        case \"twitter\":\n          return receivedPosts.map(receivedPost => <Twitter tweetId={receivedPost.id_str} key={receivedPost.id} />);\n        case \"reddit\":\n          return receivedPosts.map(receivedPost => <Reddit post={receivedPost} />);\n        case \"facebook\":\n          return <Facebook />;\n      }\n    } else return <EmptySearchResult />;\n  };\n\n  return (\n    <div>\n      <ResultsHeader>\n        Showing <SocialIcon network={selectedSocialMedia} style={{ height: 35, width: 35 }} fgColor=\"white\" /> posts for{\" \"}\n        {props.match.params.product}\n      </ResultsHeader>\n      <div>\n        <PostContainer>{memberPosts()}</PostContainer>\n      </div>\n    </div>\n  );\n}\n\nconst PostContainer = styled.div`\n  list-style-type: none;\n  margin-left: 70px;\n  margin-right: 70px;\n`;\n\nconst ResultsHeader = styled.h4`\n  text-align: center;\n  margin-bottom: 30px;\n`;\n\nexport default RetreiveAPI;\n"]},"metadata":{},"sourceType":"module"}