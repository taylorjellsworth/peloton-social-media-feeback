{"ast":null,"code":"import _slicedToArray from \"/Users/taylor.ellsworth/RN_Course_Final_Project/taylor-real-final-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/Users/taylor.ellsworth/RN_Course_Final_Project/taylor-real-final-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/Users/taylor.ellsworth/RN_Course_Final_Project/taylor-real-final-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/Users/taylor.ellsworth/RN_Course_Final_Project/taylor-real-final-project/src/components/RetreiveAPI.js\";\nimport React from \"react\";\nimport Twitter from \"./Twitter\";\nimport Reddit from \"./Reddit\";\nimport Facebook from \"./Facebook\";\n\nfunction reducer(prevState, _ref) {\n  var _newPosts, _newPosts2;\n\n  var type = _ref.type,\n      payload = _ref.payload;\n  console.log('tweet reducer payload', payload); //may need to add let newReceivedTweets = []\n  //see from hw due 1/14 - refactor to redux\n\n  var newPosts = [];\n\n  switch (type) {\n    case \"RECEIVED_TWEETS\":\n      newPosts = _toConsumableArray(prevState);\n\n      (_newPosts = newPosts).splice.apply(_newPosts, [0, newPosts.length].concat(_toConsumableArray(payload)));\n\n      return newPosts;\n\n    case \"RECEIVED_REDDIT_POSTS\":\n      newPosts = _toConsumableArray(prevState);\n\n      (_newPosts2 = newPosts).splice.apply(_newPosts2, [0, newPosts.length].concat(_toConsumableArray(payload)));\n\n      return newPosts;\n\n    default:\n      return prevState;\n  }\n}\n\nvar getTweet = function getTweet() {\n  var response, incomingData;\n  return _regeneratorRuntime.async(function getTweet$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch('/twitter'));\n\n        case 2:\n          response = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 5:\n          incomingData = _context.sent;\n          receivedPostsDispatch({\n            type: \"RECEIVED_TWEETS\",\n            payload: incomingData.statuses\n          });\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nvar getRedditPost = function getRedditPost() {\n  var newArray, response, incomingData;\n  return _regeneratorRuntime.async(function getRedditPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          newArray = [];\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(fetch('/reddit'));\n\n        case 3:\n          response = _context2.sent;\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 6:\n          incomingData = _context2.sent;\n          incomingData.map(function (post) {\n            newArray.push({\n              title: post.title,\n              text: post.selftext,\n              author: post.author,\n              createdTime: post.created_utc\n            });\n          });\n          receivedPostsDispatch({\n            type: \"RECEIVED_REDDIT_POSTS\",\n            payload: newArray\n          });\n\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  });\n};\n\nvar sendSearchParamTwitter = function sendSearchParamTwitter() {\n  fetch('/twitterApiSearch', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      seachParam: initialState.searchParam.twitter\n    })\n  });\n  getTweet();\n};\n\nvar sendSearchParamReddit = function sendSearchParamReddit() {\n  fetch('/redditApiSearch', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      searchParam: initialState.searchParam.reddit\n    })\n  });\n  getRedditPost();\n};\n\nfunction RetreiveAPI(props) {\n  console.log(\"RetreiveAPI props\", props); //To Do: Hook up search keyword to initial state\n\n  var initialState = {\n    searchParam: {\n      twitter: 'Peloton',\n      reddit: 'Bike',\n      facebook: ''\n    },\n    retreivedPosts: []\n  };\n\n  var _React$useReducer = React.useReducer(reducer, initialState.retreivedPosts),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      receivedPosts = _React$useReducer2[0],\n      receivedPostsDispatch = _React$useReducer2[1];\n\n  React.useEffect(function () {\n    if (props.match.params.socialMedia === 'twitter') sendSearchParamTwitter();\n    if (props.match.params.socialMedia === 'reddit') sendSearchParamReddit();\n  }, []);\n\n  var memberPosts = function memberPosts() {\n    switch (props.match.params.socialMedia) {\n      case 'twitter':\n        return receivedPosts.map(function (receivedPost) {\n          return React.createElement(Twitter, {\n            tweetId: receivedPost.id_str,\n            key: receivedPost.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 92\n            },\n            __self: this\n          });\n        });\n\n      case 'reddit':\n        return receivedPosts.map(function (receivedPost) {\n          return React.createElement(Reddit, {\n            post: receivedPost,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 96\n            },\n            __self: this\n          });\n        });\n\n      case 'facebook':\n        return React.createElement(Facebook, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        });\n    }\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, \"Showing \", props.match.params.socialMedia, \" Member posts for \", props.match.params.product, \"!!!\", React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, memberPosts()));\n}\n\nexport default RetreiveAPI;","map":{"version":3,"sources":["/Users/taylor.ellsworth/RN_Course_Final_Project/taylor-real-final-project/src/components/RetreiveAPI.js"],"names":["React","Twitter","Reddit","Facebook","reducer","prevState","type","payload","console","log","newPosts","splice","length","getTweet","fetch","response","json","incomingData","receivedPostsDispatch","statuses","getRedditPost","newArray","map","post","push","title","text","selftext","author","createdTime","created_utc","sendSearchParamTwitter","method","headers","body","JSON","stringify","seachParam","initialState","searchParam","twitter","sendSearchParamReddit","reddit","RetreiveAPI","props","facebook","retreivedPosts","useReducer","receivedPosts","useEffect","match","params","socialMedia","memberPosts","receivedPost","id_str","id","product"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Twitter from \"./Twitter\";\nimport Reddit from \"./Reddit\";\nimport Facebook from \"./Facebook\";\n\nfunction reducer(prevState, {type, payload}) {\n  console.log('tweet reducer payload', payload);\n  //may need to add let newReceivedTweets = []\n  //see from hw due 1/14 - refactor to redux\n  let newPosts = [];\n  switch(type) {\n    case \"RECEIVED_TWEETS\":\n      newPosts = [...prevState];\n      newPosts.splice(0, newPosts.length, ...payload);\n      return newPosts;\n    case \"RECEIVED_REDDIT_POSTS\":\n      newPosts = [...prevState];\n      newPosts.splice(0, newPosts.length, ...payload);\n      return newPosts;\n    default:\n      return prevState;\n  }\n}\n\nconst getTweet = async() => {\n  const response = await fetch('/twitter');\n  const incomingData = await response.json();\n  receivedPostsDispatch({ type: \"RECEIVED_TWEETS\", payload: incomingData.statuses });\n};\n\nconst getRedditPost = async() => {\n  let newArray = [];\n  const response = await fetch('/reddit');\n  const incomingData = await response.json();\n  incomingData.map(post => {\n    newArray.push({ \n      title: post.title,\n      text: post.selftext,\n      author: post.author,\n      createdTime: post.created_utc\n    })\n  })\n  receivedPostsDispatch({ type: \"RECEIVED_REDDIT_POSTS\", payload: newArray })\n}\n\nconst sendSearchParamTwitter = () => {\n  fetch('/twitterApiSearch', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({seachParam: initialState.searchParam.twitter})\n  });\n  getTweet()\n}\n\nconst sendSearchParamReddit = () => {\n  fetch('/redditApiSearch', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({searchParam: initialState.searchParam.reddit})\n  });\n  getRedditPost();\n}\n\n\nfunction RetreiveAPI(props) {\n  console.log(\"RetreiveAPI props\", props);\n  \n  //To Do: Hook up search keyword to initial state\n  const initialState = {\n    searchParam: {twitter: 'Peloton', reddit: 'Bike', facebook: ''},\n    retreivedPosts: []\n  };\n\n  const [receivedPosts, receivedPostsDispatch] = React.useReducer(reducer, initialState.retreivedPosts);\n\n\n\n\n  React.useEffect(() => {\n    if(props.match.params.socialMedia === 'twitter') sendSearchParamTwitter();\n    if(props.match.params.socialMedia === 'reddit') sendSearchParamReddit();\n  }, []);\n\n  const memberPosts = () => {\n    switch(props.match.params.socialMedia){\n      case 'twitter':\n        return (receivedPosts.map(receivedPost => (\n          <Twitter tweetId={receivedPost.id_str} key={receivedPost.id}/>\n        )));\n      case 'reddit':\n        return (receivedPosts.map(receivedPost => (\n          <Reddit post={receivedPost} />\n        )));\n      case 'facebook':\n        return <Facebook/>;\n    }\n  }\n\n  return (\n    <div>\n      Showing {props.match.params.socialMedia} Member posts for {props.match.params.product}!!!\n      <div>\n        {memberPosts()}\n      </div>\n    </div>\n  );\n}\n\nexport default RetreiveAPI;\n"]},"metadata":{},"sourceType":"module"}