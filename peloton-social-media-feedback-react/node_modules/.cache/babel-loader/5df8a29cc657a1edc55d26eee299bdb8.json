{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/taylor.ellsworth/RN_Course_Final_Project/taylor-real-final-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _slicedToArray from \"/Users/taylor.ellsworth/RN_Course_Final_Project/taylor-real-final-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/Users/taylor.ellsworth/RN_Course_Final_Project/taylor-real-final-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/Users/taylor.ellsworth/RN_Course_Final_Project/taylor-real-final-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/Users/taylor.ellsworth/RN_Course_Final_Project/taylor-real-final-project/src/components/RetreiveAPI.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  list-style-type: none;\\n  margin-left: 70px;\\n  margin-right: 70px;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Twitter from \"./Twitter\";\nimport Reddit from \"./Reddit\";\nimport Facebook from \"./Facebook\";\nimport styled from \"styled-components\";\nimport EmptySearchResult from \"./EmptySearchResult\";\nimport searchParameters from \"./SearchParameters\";\nimport sendSearchParamTwitter from \"./SendSearchQueryToApi\";\nimport sendSearchParamReddit from \"./SendSearchQueryToApi\";\nvar initialState = {\n  searchParam: {\n    twitter: \"Peloton Bike\",\n    reddit: \"Bike\",\n    facebook: \"\"\n  },\n  retreivedPosts: [\"\"]\n};\n\nfunction reducer(prevState, _ref) {\n  var _newPosts, _newPosts2;\n\n  var type = _ref.type,\n      payload = _ref.payload;\n  console.log(\"tweet reducer payload\", payload);\n  var newPosts = [];\n\n  switch (type) {\n    case \"RECEIVED_TWEETS\":\n      newPosts = _toConsumableArray(prevState);\n\n      (_newPosts = newPosts).splice.apply(_newPosts, [0, newPosts.length].concat(_toConsumableArray(payload)));\n\n      return newPosts;\n\n    case \"RECEIVED_REDDIT_POSTS\":\n      newPosts = _toConsumableArray(prevState);\n\n      (_newPosts2 = newPosts).splice.apply(_newPosts2, [0, newPosts.length].concat(_toConsumableArray(payload)));\n\n      return newPosts;\n\n    default:\n      return prevState;\n  }\n}\n\nvar sendSearchParam = function sendSearchParam(searchParameter) {\n  return _regeneratorRuntime.async(function sendSearchParam$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nfunction RetreiveAPI(props) {\n  console.log(\"RetreiveAPI props\", props);\n\n  var _React$useReducer = React.useReducer(reducer, initialState.retreivedPosts),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      receivedPosts = _React$useReducer2[0],\n      receivedPostsDispatch = _React$useReducer2[1];\n\n  var _useSelector = useSelector(function (appState) {\n    return appState;\n  }),\n      selectedProduct = _useSelector.selectedProduct,\n      selectedSocialMedia = _useSelector.selectedSocialMedia,\n      searchTerm = _useSelector.searchTerm;\n\n  var getTweet = function getTweet(searchParameter) {\n    var response, incomingData;\n    return _regeneratorRuntime.async(function getTweet$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            sendSearchParamTwitter();\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(fetch(\"/twitter\"));\n\n          case 3:\n            response = _context2.sent;\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            incomingData = _context2.sent;\n            receivedPostsDispatch({\n              type: \"RECEIVED_TWEETS\",\n              payload: incomingData.statuses\n            });\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    });\n  };\n\n  var getRedditPost = function getRedditPost(searchParameter) {\n    var newArray, response, incomingData;\n    return _regeneratorRuntime.async(function getRedditPost$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            newArray = [];\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(fetch(\"/reddit\"));\n\n          case 3:\n            response = _context3.sent;\n            _context3.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            incomingData = _context3.sent;\n            incomingData.map(function (post) {\n              newArray.push({\n                title: post.title,\n                text: post.selftext,\n                author: post.author,\n                createdTime: post.created_utc,\n                url: post.permalink\n              });\n            });\n            receivedPostsDispatch({\n              type: \"RECEIVED_REDDIT_POSTS\",\n              payload: newArray\n            });\n\n          case 9:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    });\n  }; // const sendSearchParamTwitter = async searchParameter => {\n  //   console.log(\"cmonnn 1 more!\", searchParameter);\n  //   fetch(\"/twitterApiSearch\", {\n  //     method: \"post\",\n  //     headers: {\n  //       \"Content-Type\": \"application/json\"\n  //     },\n  //     body: JSON.stringify({ seachParam: searchParameter.searchTerm })\n  //   });\n  //   await getTweet();\n  // };\n  // const sendSearchParamReddit = async searchParameter => {\n  //   fetch(\"/redditApiSearch\", {\n  //     method: \"post\",\n  //     headers: {\n  //       \"Content-Type\": \"application/json\"\n  //     },\n  //     body: JSON.stringify({ searchParam: searchParameter.searchTerm })\n  //   });\n  //   await getRedditPost();\n  // };\n\n\n  React.useEffect(function () {\n    console.log(\"in useEffect!\", {\n      selectedProduct: selectedProduct,\n      selectedSocialMedia: selectedSocialMedia,\n      searchTerm: searchTerm\n    });\n    var socialMediaSearchParameter = searchParameters(selectedSocialMedia, selectedProduct, searchTerm);\n    console.log(\"Finalnly did it!!!\", socialMediaSearchParameter);\n    if (selectedSocialMedia === \"twitter\") sendSearchParamTwitter(socialMediaSearchParameter);\n    if (selectedSocialMedia === \"reddit\") sendSearchParamReddit(socialMediaSearchParameter);\n  }, [selectedProduct]);\n\n  var memberPosts = function memberPosts() {\n    console.log(\"neeeeeeed results!!!!\", receivedPosts);\n\n    if (receivedPosts.length > 0) {\n      switch (selectedSocialMedia) {\n        case \"twitter\":\n          return receivedPosts.map(function (receivedPost) {\n            return React.createElement(Twitter, {\n              tweetId: receivedPost.id_str,\n              key: receivedPost.id,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 103\n              },\n              __self: this\n            });\n          });\n\n        case \"reddit\":\n          return receivedPosts.map(function (receivedPost) {\n            return React.createElement(Reddit, {\n              post: receivedPost,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 105\n              },\n              __self: this\n            });\n          });\n\n        case \"facebook\":\n          return React.createElement(Facebook, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 107\n            },\n            __self: this\n          });\n      }\n    } else return React.createElement(EmptySearchResult, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    });\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    align: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, \"Showing \", selectedSocialMedia, \" posts for \", props.match.params.product, \"!!!\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, React.createElement(PostContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, memberPosts())));\n}\n\nvar PostContainer = styled.div(_templateObject());\nexport default RetreiveAPI;","map":{"version":3,"sources":["/Users/taylor.ellsworth/RN_Course_Final_Project/taylor-real-final-project/src/components/RetreiveAPI.js"],"names":["React","useSelector","Twitter","Reddit","Facebook","styled","EmptySearchResult","searchParameters","sendSearchParamTwitter","sendSearchParamReddit","initialState","searchParam","twitter","reddit","facebook","retreivedPosts","reducer","prevState","type","payload","console","log","newPosts","splice","length","sendSearchParam","searchParameter","RetreiveAPI","props","useReducer","receivedPosts","receivedPostsDispatch","appState","selectedProduct","selectedSocialMedia","searchTerm","getTweet","fetch","response","json","incomingData","statuses","getRedditPost","newArray","map","post","push","title","text","selftext","author","createdTime","created_utc","url","permalink","useEffect","socialMediaSearchParameter","memberPosts","receivedPost","id_str","id","match","params","product","PostContainer","div"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Twitter from \"./Twitter\";\nimport Reddit from \"./Reddit\";\nimport Facebook from \"./Facebook\";\nimport styled from \"styled-components\";\nimport EmptySearchResult from \"./EmptySearchResult\";\nimport searchParameters from \"./SearchParameters\";\nimport sendSearchParamTwitter from \"./SendSearchQueryToApi\";\nimport sendSearchParamReddit from \"./SendSearchQueryToApi\";\n\nconst initialState = {\n  searchParam: { twitter: \"Peloton Bike\", reddit: \"Bike\", facebook: \"\" },\n  retreivedPosts: [\"\"]\n};\n\nfunction reducer(prevState, { type, payload }) {\n  console.log(\"tweet reducer payload\", payload);\n  let newPosts = [];\n  switch (type) {\n    case \"RECEIVED_TWEETS\":\n      newPosts = [...prevState];\n      newPosts.splice(0, newPosts.length, ...payload);\n      return newPosts;\n    case \"RECEIVED_REDDIT_POSTS\":\n      newPosts = [...prevState];\n      newPosts.splice(0, newPosts.length, ...payload);\n      return newPosts;\n    default:\n      return prevState;\n  }\n}\n\nconst sendSearchParam = async searchParameter => {};\n\nfunction RetreiveAPI(props) {\n  console.log(\"RetreiveAPI props\", props);\n  const [receivedPosts, receivedPostsDispatch] = React.useReducer(reducer, initialState.retreivedPosts);\n  const { selectedProduct, selectedSocialMedia, searchTerm } = useSelector(appState => appState);\n\n  const getTweet = async searchParameter => {\n    sendSearchParamTwitter();\n    const response = await fetch(\"/twitter\");\n    const incomingData = await response.json();\n    receivedPostsDispatch({\n      type: \"RECEIVED_TWEETS\",\n      payload: incomingData.statuses\n    });\n  };\n\n  const getRedditPost = async searchParameter => {\n    let newArray = [];\n    const response = await fetch(\"/reddit\");\n    const incomingData = await response.json();\n    incomingData.map(post => {\n      newArray.push({\n        title: post.title,\n        text: post.selftext,\n        author: post.author,\n        createdTime: post.created_utc,\n        url: post.permalink\n      });\n    });\n    receivedPostsDispatch({ type: \"RECEIVED_REDDIT_POSTS\", payload: newArray });\n  };\n\n  // const sendSearchParamTwitter = async searchParameter => {\n  //   console.log(\"cmonnn 1 more!\", searchParameter);\n  //   fetch(\"/twitterApiSearch\", {\n  //     method: \"post\",\n  //     headers: {\n  //       \"Content-Type\": \"application/json\"\n  //     },\n  //     body: JSON.stringify({ seachParam: searchParameter.searchTerm })\n  //   });\n  //   await getTweet();\n  // };\n\n  // const sendSearchParamReddit = async searchParameter => {\n  //   fetch(\"/redditApiSearch\", {\n  //     method: \"post\",\n  //     headers: {\n  //       \"Content-Type\": \"application/json\"\n  //     },\n  //     body: JSON.stringify({ searchParam: searchParameter.searchTerm })\n  //   });\n  //   await getRedditPost();\n  // };\n\n  React.useEffect(() => {\n    console.log(\"in useEffect!\", { selectedProduct, selectedSocialMedia, searchTerm });\n    let socialMediaSearchParameter = searchParameters(selectedSocialMedia, selectedProduct, searchTerm);\n    console.log(\"Finalnly did it!!!\", socialMediaSearchParameter);\n    if (selectedSocialMedia === \"twitter\") sendSearchParamTwitter(socialMediaSearchParameter);\n    if (selectedSocialMedia === \"reddit\") sendSearchParamReddit(socialMediaSearchParameter);\n  }, [selectedProduct]);\n\n  const memberPosts = () => {\n    console.log(\"neeeeeeed results!!!!\", receivedPosts);\n    if (receivedPosts.length > 0) {\n      switch (selectedSocialMedia) {\n        case \"twitter\":\n          return receivedPosts.map(receivedPost => <Twitter tweetId={receivedPost.id_str} key={receivedPost.id} />);\n        case \"reddit\":\n          return receivedPosts.map(receivedPost => <Reddit post={receivedPost} />);\n        case \"facebook\":\n          return <Facebook />;\n      }\n    } else return <EmptySearchResult />;\n  };\n\n  return (\n    <div>\n      <div align=\"center\">\n        Showing {selectedSocialMedia} posts for {props.match.params.product}!!!\n      </div>\n      <div>\n        <PostContainer>{memberPosts()}</PostContainer>\n      </div>\n    </div>\n  );\n}\n\nconst PostContainer = styled.div`\n  list-style-type: none;\n  margin-left: 70px;\n  margin-right: 70px;\n`;\n\nexport default RetreiveAPI;\n"]},"metadata":{},"sourceType":"module"}