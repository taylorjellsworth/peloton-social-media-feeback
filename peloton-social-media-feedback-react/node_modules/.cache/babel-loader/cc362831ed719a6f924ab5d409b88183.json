{"ast":null,"code":"import _toConsumableArray from \"/Users/taylor.ellsworth/RN_Course_Final_Project/taylor-real-final-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/taylor.ellsworth/RN_Course_Final_Project/taylor-real-final-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"/Users/taylor.ellsworth/RN_Course_Final_Project/taylor-real-final-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/taylor.ellsworth/RN_Course_Final_Project/taylor-real-final-project/src/components/RetreiveAPI.js\";\nimport React from \"react\"; // import { TwitterTweetEmbed } from \"react-twitter-embed\";\n\nimport Twitter from \"./Twitter\";\n\nfunction RetreiveAPI(props) {\n  console.log(\"RetreiveAPI props\", props); //To Do: Hook up search keyword to initial state\n\n  var initialState = {\n    searchParam: {\n      twitter: 'Peloton',\n      reddit: 'Bike',\n      facebook: ''\n    },\n    retreivedPosts: []\n  };\n\n  var _React$useReducer = React.useReducer(reducer, initialState.retreivedPosts),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      receivedPosts = _React$useReducer2[0],\n      receivedPostsDispatch = _React$useReducer2[1];\n\n  var getTweet = function getTweet() {\n    var response, incomingData;\n    return _regeneratorRuntime.async(function getTweet$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch('/twitter'));\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 5:\n            incomingData = _context.sent;\n            receivedPostsDispatch({\n              type: \"RECEIVED_TWEETS\",\n              payload: incomingData.statuses\n            });\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  };\n\n  var getRedditPost = function getRedditPost() {\n    var newArray, response, incomingData;\n    return _regeneratorRuntime.async(function getRedditPost$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            newArray = [];\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(fetch('/reddit'));\n\n          case 3:\n            response = _context2.sent;\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            incomingData = _context2.sent;\n            incomingData.map(function (post) {\n              newArray.push({\n                title: post.title,\n                text: post.selftext,\n                author: post.author,\n                createdTime: post.created_utc\n              });\n            });\n            receivedPostsDispatch({\n              type: \"RECEIVED_REDDIT_POSTS\",\n              payload: newArray\n            });\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    });\n  };\n\n  var sendSearchParamTwitter = function sendSearchParamTwitter() {\n    fetch('/twitterSearchParam', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        seachParam: initialState.searchParam.twitter\n      })\n    });\n    getTweet();\n  };\n\n  var sendSearchParamReddit = function sendSearchParamReddit() {\n    fetch('/redditSearchParam', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        searchParam: initialState.searchParam.reddit\n      })\n    });\n    getRedditPost();\n  };\n\n  function reducer(prevState, _ref) {\n    var _newPosts, _newPosts2;\n\n    var type = _ref.type,\n        payload = _ref.payload;\n    console.log('tweet reducer payload', payload); //may need to add let newReceivedTweets = []\n    //see from hw due 1/14 - refactor to redux\n\n    var newPosts = [];\n\n    switch (type) {\n      case \"RECEIVED_TWEETS\":\n        newPosts = _toConsumableArray(prevState);\n\n        (_newPosts = newPosts).splice.apply(_newPosts, [0, newPosts.length].concat(_toConsumableArray(payload)));\n\n        return newPosts;\n\n      case \"RECEIVED_REDDIT_POSTS\":\n        newPosts = _toConsumableArray(prevState);\n\n        (_newPosts2 = newPosts).splice.apply(_newPosts2, [0, newPosts.length].concat(_toConsumableArray(payload)));\n\n        return newPosts;\n\n      default:\n        return prevState;\n    }\n  }\n\n  React.useEffect(function () {\n    if (props.match.params.socialMedia === 'twitter') sendSearchParamTwitter();\n    if (props.match.params.socialMedia === 'reddit') sendSearchParamReddit();\n  }, []);\n\n  var memberPosts = function memberPosts() {\n    switch (props.match.params.socialMedia) {\n      case 'twitter':\n        return receivedPosts.map(function (receivedPost) {\n          return React.createElement(Twitter, {\n            tweetId: receivedPost.id_str,\n            key: receivedPost.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 88\n            },\n            __self: this\n          });\n        });\n\n      case 'reddit':\n        return receivedPosts.map(function (receivedPost) {\n          return React.createElement(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 92\n            },\n            __self: this\n          }, receivedPost.title)\n          /* To Do: Display all data returned */\n          ;\n        });\n\n      case 'facebook':\n        return React.createElement(\"em\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        }, \"Under Construction\");\n    }\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, \"Showing \", props.match.params.socialMedia, \" Member posts for \", props.match.params.product, \"!!!\", React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, memberPosts()));\n}\n\nexport default RetreiveAPI;","map":{"version":3,"sources":["/Users/taylor.ellsworth/RN_Course_Final_Project/taylor-real-final-project/src/components/RetreiveAPI.js"],"names":["React","Twitter","RetreiveAPI","props","console","log","initialState","searchParam","twitter","reddit","facebook","retreivedPosts","useReducer","reducer","receivedPosts","receivedPostsDispatch","getTweet","fetch","response","json","incomingData","type","payload","statuses","getRedditPost","newArray","map","post","push","title","text","selftext","author","createdTime","created_utc","sendSearchParamTwitter","method","headers","body","JSON","stringify","seachParam","sendSearchParamReddit","prevState","newPosts","splice","length","useEffect","match","params","socialMedia","memberPosts","receivedPost","id_str","id","product"],"mappings":"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","sourcesContent":["import React from \"react\";\n// import { TwitterTweetEmbed } from \"react-twitter-embed\";\nimport Twitter from \"./Twitter\"\n\nfunction RetreiveAPI(props) {\n  console.log(\"RetreiveAPI props\", props);\n  \n  //To Do: Hook up search keyword to initial state\n  const initialState = {\n    searchParam: {twitter: 'Peloton', reddit: 'Bike', facebook: ''},\n    retreivedPosts: []\n  };\n\n  const [receivedPosts, receivedPostsDispatch] = React.useReducer(reducer, initialState.retreivedPosts);\n\n  const getTweet = async() => {\n    const response = await fetch('/twitter');\n    const incomingData = await response.json();\n    receivedPostsDispatch({ type: \"RECEIVED_TWEETS\", payload: incomingData.statuses });\n  };\n\n  const getRedditPost = async() => {\n    let newArray = [];\n    const response = await fetch('/reddit');\n    const incomingData = await response.json();\n    incomingData.map(post => {\n      newArray.push({ \n        title: post.title,\n        text: post.selftext,\n        author: post.author,\n        createdTime: post.created_utc\n      })\n    })\n\n    receivedPostsDispatch({ type: \"RECEIVED_REDDIT_POSTS\", payload: newArray })\n  }\n\n  const sendSearchParamTwitter = () => {\n    fetch('/twitterSearchParam', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({seachParam: initialState.searchParam.twitter})\n    });\n    getTweet()\n  }\n\n  const sendSearchParamReddit = () => {\n    fetch('/redditSearchParam', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({searchParam: initialState.searchParam.reddit})\n    });\n    getRedditPost();\n  }\n\n  function reducer(prevState, {type, payload}) {\n    console.log('tweet reducer payload', payload);\n    //may need to add let newReceivedTweets = []\n    //see from hw due 1/14 - refactor to redux\n    let newPosts = [];\n    switch(type) {\n      case \"RECEIVED_TWEETS\":\n        newPosts = [...prevState];\n        newPosts.splice(0, newPosts.length, ...payload);\n        return newPosts;\n      case \"RECEIVED_REDDIT_POSTS\":\n        newPosts = [...prevState];\n        newPosts.splice(0, newPosts.length, ...payload);\n        return newPosts;\n      default:\n        return prevState;\n    }\n  }\n\n  React.useEffect(() => {\n    if(props.match.params.socialMedia === 'twitter') sendSearchParamTwitter();\n    if(props.match.params.socialMedia === 'reddit') sendSearchParamReddit();\n  }, []);\n\n  const memberPosts = () => {\n    switch(props.match.params.socialMedia){\n      case 'twitter':\n        return (receivedPosts.map(receivedPost => (\n          <Twitter tweetId={receivedPost.id_str} key={receivedPost.id}/>\n        )));\n      case 'reddit':\n        return (receivedPosts.map(receivedPost => (\n            <p>{receivedPost.title}</p>\n            /* To Do: Display all data returned */\n        )));\n      case 'facebook':\n        return(<em>Under Construction</em>);\n    }\n  }\n\n  return (\n    <div>\n      Showing {props.match.params.socialMedia} Member posts for {props.match.params.product}!!!\n      {/* <p>\n      <button onClick={sendSearchParamReddit}>Button to Get Tweets! </button>\n      </p> */}\n      <div>\n        {memberPosts()}\n      </div>\n    </div>\n  );\n}\n\nexport default RetreiveAPI;\n"]},"metadata":{},"sourceType":"module"}