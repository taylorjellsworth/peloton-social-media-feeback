{"ast":null,"code":"import _toConsumableArray from \"/Users/taylor.ellsworth/RN_Course_Final_Project/taylor-real-final-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/taylor.ellsworth/RN_Course_Final_Project/taylor-real-final-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"/Users/taylor.ellsworth/RN_Course_Final_Project/taylor-real-final-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/taylor.ellsworth/RN_Course_Final_Project/taylor-real-final-project/src/components/RetreiveAPI.js\";\nimport React from \"react\";\nimport { TwitterTweetEmbed } from \"react-twitter-embed\";\n\nfunction RetreiveAPI(props) {\n  console.log(\"RetreiveAPI props\", props); //To Do: 1/11\n  // If (twitter) Retreive Twitter API using useEffect\n  // If (facebook) Retreive FB API using useEffect\n  // If (reddit) Retreive Reddit API using useEffect\n  //To Do: Hook up search keyword to initial state\n\n  var initialState = {\n    searchParam: 'Peloton',\n    retreivedTweets: []\n  };\n\n  var _React$useReducer = React.useReducer(reducer, initialState.retreivedTweets),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      receivedTweets = _React$useReducer2[0],\n      receivedTweetsDispatch = _React$useReducer2[1];\n\n  var getTweet = function getTweet() {\n    var response, incomingData;\n    return _regeneratorRuntime.async(function getTweet$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch('/twitter'));\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 5:\n            incomingData = _context.sent;\n            receivedTweetsDispatch({\n              type: \"RECEIVED_TWEETS\",\n              payload: incomingData.statuses\n            });\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  };\n\n  var sendSearchParamTwitter = function sendSearchParamTwitter() {\n    fetch('/userName', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        userName: initialState.searchParam\n      })\n    });\n    getTweet();\n  };\n\n  function reducer(prevState, _ref) {\n    var type = _ref.type,\n        payload = _ref.payload;\n    console.log('tweet reducer payload', payload);\n\n    switch (type) {\n      case \"RECEIVED_TWEETS\":\n        var newReceivedTweets = _toConsumableArray(prevState);\n\n        newReceivedTweets.splice.apply(newReceivedTweets, [0, newReceivedTweets.length].concat(_toConsumableArray(payload)));\n        return newReceivedTweets;\n\n      default:\n        return prevState;\n    }\n  }\n\n  React.useEffect(function () {\n    if (props.match.params.socialMedia === 'twitter') sendSearchParamTwitter();\n  }, []);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, \"Showing \", props.match.params.socialMedia, \" Member posts for \", props.match.params.product, \"!!!\", React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: sendSearchParamTwitter,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"Button to Get Tweets! \")), receivedTweets.map(function (receivedTweet) {\n    return React.createElement(TwitterTweetEmbed, {\n      tweetId: receivedTweet.id_str,\n      key: receivedTweet.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    });\n  }));\n}\n\nexport default RetreiveAPI;","map":{"version":3,"sources":["/Users/taylor.ellsworth/RN_Course_Final_Project/taylor-real-final-project/src/components/RetreiveAPI.js"],"names":["React","TwitterTweetEmbed","RetreiveAPI","props","console","log","initialState","searchParam","retreivedTweets","useReducer","reducer","receivedTweets","receivedTweetsDispatch","getTweet","fetch","response","json","incomingData","type","payload","statuses","sendSearchParamTwitter","method","headers","body","JSON","stringify","userName","prevState","newReceivedTweets","splice","length","useEffect","match","params","socialMedia","product","map","receivedTweet","id_str","id"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAT,QAAkC,qBAAlC;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAC1BC,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCF,KAAjC,EAD0B,CAE1B;AACA;AACA;AACA;AAEA;;AACA,MAAMG,YAAY,GAAG;AACnBC,IAAAA,WAAW,EAAE,SADM;AAEnBC,IAAAA,eAAe,EAAE;AAFE,GAArB;;AAR0B,0BAYuBR,KAAK,CAACS,UAAN,CAAiBC,OAAjB,EAA0BJ,YAAY,CAACE,eAAvC,CAZvB;AAAA;AAAA,MAYnBG,cAZmB;AAAA,MAYHC,sBAZG;;AAc1B,MAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACQC,KAAK,CAAC,UAAD,CADb;;AAAA;AACTC,YAAAA,QADS;AAAA;AAAA,6CAEYA,QAAQ,CAACC,IAAT,EAFZ;;AAAA;AAETC,YAAAA,YAFS;AAGfL,YAAAA,sBAAsB,CAAC;AAAEM,cAAAA,IAAI,EAAE,iBAAR;AAA2BC,cAAAA,OAAO,EAAEF,YAAY,CAACG;AAAjD,aAAD,CAAtB;;AAHe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAMA,MAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,GAAM;AACnCP,IAAAA,KAAK,CAAC,WAAD,EAAc;AACjBQ,MAAAA,MAAM,EAAE,MADS;AAEjBC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFQ;AAKjBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACC,QAAAA,QAAQ,EAAErB,YAAY,CAACC;AAAxB,OAAf;AALW,KAAd,CAAL;AAOAM,IAAAA,QAAQ;AACT,GATD;;AAWA,WAASH,OAAT,CAAiBkB,SAAjB,QAA6C;AAAA,QAAhBV,IAAgB,QAAhBA,IAAgB;AAAA,QAAVC,OAAU,QAAVA,OAAU;AAC3Cf,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCc,OAArC;;AACA,YAAOD,IAAP;AACE,WAAK,iBAAL;AACE,YAAMW,iBAAiB,sBAAOD,SAAP,CAAvB;;AACAC,QAAAA,iBAAiB,CAACC,MAAlB,OAAAD,iBAAiB,GAAQ,CAAR,EAAWA,iBAAiB,CAACE,MAA7B,4BAAwCZ,OAAxC,GAAjB;AACA,eAAOU,iBAAP;;AACF;AACE,eAAOD,SAAP;AANJ;AAQD;;AAED5B,EAAAA,KAAK,CAACgC,SAAN,CAAgB,YAAM;AACpB,QAAG7B,KAAK,CAAC8B,KAAN,CAAYC,MAAZ,CAAmBC,WAAnB,KAAmC,SAAtC,EAAiDd,sBAAsB;AACxE,GAFD,EAEG,EAFH;AAIA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACWlB,KAAK,CAAC8B,KAAN,CAAYC,MAAZ,CAAmBC,WAD9B,wBAC6DhC,KAAK,CAAC8B,KAAN,CAAYC,MAAZ,CAAmBE,OADhF,SAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAQ,IAAA,OAAO,EAAEf,sBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADA,CAFF,EAKGV,cAAc,CAAC0B,GAAf,CAAmB,UAAAC,aAAa;AAAA,WAC/B,oBAAC,iBAAD;AAAmB,MAAA,OAAO,EAAEA,aAAa,CAACC,MAA1C;AAAkD,MAAA,GAAG,EAAED,aAAa,CAACE,EAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAD+B;AAAA,GAAhC,CALH,CADF;AAWD;;AAED,eAAetC,WAAf","sourcesContent":["import React from \"react\";\nimport { TwitterTweetEmbed } from \"react-twitter-embed\";\n\nfunction RetreiveAPI(props) {\n  console.log(\"RetreiveAPI props\", props);\n  //To Do: 1/11\n  // If (twitter) Retreive Twitter API using useEffect\n  // If (facebook) Retreive FB API using useEffect\n  // If (reddit) Retreive Reddit API using useEffect\n\n  //To Do: Hook up search keyword to initial state\n  const initialState = {\n    searchParam: 'Peloton',\n    retreivedTweets: []\n  };\n  const [receivedTweets, receivedTweetsDispatch] = React.useReducer(reducer, initialState.retreivedTweets);\n\n  const getTweet = async() => {\n    const response = await fetch('/twitter');\n    const incomingData = await response.json();\n    receivedTweetsDispatch({ type: \"RECEIVED_TWEETS\", payload: incomingData.statuses });\n  };\n\n  const sendSearchParamTwitter = () => {\n    fetch('/userName', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({userName: initialState.searchParam})\n    });\n    getTweet()\n  }\n\n  function reducer(prevState, {type, payload}) {\n    console.log('tweet reducer payload', payload);\n    switch(type) {\n      case \"RECEIVED_TWEETS\":\n        const newReceivedTweets = [...prevState];\n        newReceivedTweets.splice(0, newReceivedTweets.length, ...payload);\n        return newReceivedTweets;\n      default:\n        return prevState;\n    }\n  }\n\n  React.useEffect(() => {\n    if(props.match.params.socialMedia === 'twitter') sendSearchParamTwitter();\n  }, []);\n\n  return (\n    <div>\n      Showing {props.match.params.socialMedia} Member posts for {props.match.params.product}!!!\n      <p>\n      <button onClick={sendSearchParamTwitter}>Button to Get Tweets! </button>\n      </p>\n      {receivedTweets.map(receivedTweet => (\n        <TwitterTweetEmbed tweetId={receivedTweet.id_str} key={receivedTweet.id}/>\n      ))}\n    </div>\n  );\n}\n\nexport default RetreiveAPI;\n"]},"metadata":{},"sourceType":"module"}